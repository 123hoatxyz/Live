// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Raleway-Regular.ttf`.
    static let ralewayRegularTtf = FileResource(bundle: _R.hostingBundle, name: "Raleway-Regular", pathExtension: "ttf")
    
    /// `bundle.URLForResource("Raleway-Regular", withExtension: "ttf")`
    static func ralewayRegularTtf(_: Void) -> NSURL? {
      let fileResource = R.file.ralewayRegularTtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font {
    /// Font `Raleway-Regular`.
    static let ralewayRegular = FontResource(fontName: "Raleway-Regular")
    
    /// `UIFont(name: "Raleway-Regular", size: ...)`
    static func ralewayRegular(size size: CGFloat) -> UIFont? {
      return UIFont(resource: ralewayRegular, size: size)
    }
    
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `heart`.
    static let heart = ImageResource(bundle: _R.hostingBundle, name: "heart")
    
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.heart, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `AudienceViewController`, and contains static references to 1 segues.
    struct audienceViewController {
      /// Segue identifier `overlay`.
      static let overlay: StoryboardSegueIdentifier<UIStoryboardSegue, AudienceViewController, LiveOverlayViewController> = StoryboardSegueIdentifier(identifier: "overlay")
      
      /// Optionally returns a typed version of segue `overlay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func overlay(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, AudienceViewController, LiveOverlayViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.audienceViewController.overlay, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `BroadcasterViewController`, and contains static references to 1 segues.
    struct broadcasterViewController {
      /// Segue identifier `overlay`.
      static let overlay: StoryboardSegueIdentifier<UIStoryboardSegue, BroadcasterViewController, LiveOverlayViewController> = StoryboardSegueIdentifier(identifier: "overlay")
      
      /// Optionally returns a typed version of segue `overlay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func overlay(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, BroadcasterViewController, LiveOverlayViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.broadcasterViewController.overlay, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "io.ltebean.Live") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationController
      
      let audience = StoryboardViewControllerResource<AudienceViewController>(identifier: "audience")
      let broadcast = StoryboardViewControllerResource<BroadcasterViewController>(identifier: "broadcast")
      let bundle = _R.hostingBundle
      let name = "Main"
      
      func audience(_: Void) -> AudienceViewController? {
        return UIStoryboard(resource: self).instantiateViewController(audience)
      }
      
      func broadcast(_: Void) -> BroadcasterViewController? {
        return UIStoryboard(resource: self).instantiateViewController(broadcast)
      }
      
      static func validate() throws {
        if _R.storyboard.main().broadcast() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'broadcast' could not be loaded from storyboard 'Main' as 'BroadcasterViewController'.") }
        if _R.storyboard.main().audience() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'audience' could not be loaded from storyboard 'Main' as 'AudienceViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}